{"version":3,"file":"node_modules_prismjs_components_prism-cshtml_js.index.js","mappings":";;;;;;;;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,IAAI;;AAE/C;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,cAAc;AACd;AACA;AACA,kBAAkB,eAAe;AACjC,sDAAsD,+BAA+B;AACrF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,OAAO,gCAAgC;AAC9D;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6DAA6D;;AAE7D;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE,IAAI,2CAA2C,GAAG;;AAEpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yDAAyD,sBAAsB;;AAE/E;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,eAAe;AACf;AACA,qBAAqB;AACrB;AACA,cAAc,MAAM;AACpB,qEAAqE;AACrE,eAAe,MAAM,cAAc,MAAM,UAAU;AACnD;AACA,mBAAmB,KAAK,eAAe,KAAK,MAAM;AAClD;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;;AAEA,CAAC","sources":["webpack://tuval-core/./node_modules/prismjs/components/prism-cshtml.js"],"sourcesContent":["// Docs:\n// https://docs.microsoft.com/en-us/aspnet/core/razor-pages/?view=aspnetcore-5.0&tabs=visual-studio\n// https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0\n\n(function (Prism) {\n\n\tvar commentLike = /\\/(?![/*])|\\/\\/.*[\\r\\n]|\\/\\*[^*]*(?:\\*(?!\\/)[^*]*)*\\*\\//.source;\n\tvar stringLike =\n\t\t/@(?!\")|\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|@\"(?:[^\\\\\"]|\"\"|\\\\[\\s\\S])*\"(?!\")/.source +\n\t\t'|' +\n\t\t/'(?:(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'|(?=[^\\\\](?!')))/.source;\n\n\t/**\n\t * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\n\t *\n\t * @param {string} pattern\n\t * @param {number} depthLog2\n\t * @returns {string}\n\t */\n\tfunction nested(pattern, depthLog2) {\n\t\tfor (var i = 0; i < depthLog2; i++) {\n\t\t\tpattern = pattern.replace(/<self>/g, function () { return '(?:' + pattern + ')'; });\n\t\t}\n\t\treturn pattern\n\t\t\t.replace(/<self>/g, '[^\\\\s\\\\S]')\n\t\t\t.replace(/<str>/g, '(?:' + stringLike + ')')\n\t\t\t.replace(/<comment>/g, '(?:' + commentLike + ')');\n\t}\n\n\tvar round = nested(/\\((?:[^()'\"@/]|<str>|<comment>|<self>)*\\)/.source, 2);\n\tvar square = nested(/\\[(?:[^\\[\\]'\"@/]|<str>|<comment>|<self>)*\\]/.source, 1);\n\tvar curly = nested(/\\{(?:[^{}'\"@/]|<str>|<comment>|<self>)*\\}/.source, 2);\n\tvar angle = nested(/<(?:[^<>'\"@/]|<comment>|<self>)*>/.source, 1);\n\n\tvar inlineCs = /@/.source +\n\t\t/(?:await\\b\\s*)?/.source +\n\t\t'(?:' + /(?!await\\b)\\w+\\b/.source + '|' + round + ')' +\n\t\t'(?:' + /[?!]?\\.\\w+\\b/.source + '|' + '(?:' + angle + ')?' + round + '|' + square + ')*' +\n\t\t/(?![?!\\.(\\[]|<(?!\\/))/.source;\n\n\t// Note about the above bracket patterns:\n\t// They all ignore HTML expressions that might be in the C# code. This is a problem because HTML (like strings and\n\t// comments) is parsed differently. This is a huge problem because HTML might contain brackets and quotes which\n\t// messes up the bracket and string counting implemented by the above patterns.\n\t//\n\t// This problem is not fixable because 1) HTML expression are highly context sensitive and very difficult to detect\n\t// and 2) they require one capturing group at every nested level. See the `tagRegion` pattern to admire the\n\t// complexity of an HTML expression.\n\t//\n\t// To somewhat alleviate the problem a bit, the patterns for characters (e.g. 'a') is very permissive, it also\n\t// allows invalid characters to support HTML expressions like this: <p>That's it!</p>.\n\n\tvar tagAttrInlineCs = /@(?![\\w()])/.source + '|' + inlineCs;\n\tvar tagAttrValue = '(?:' +\n\t\t/\"[^\"@]*\"|'[^'@]*'|[^\\s'\"@>=]+(?=[\\s>])/.source +\n\t\t'|' +\n\t\t'[\"\\'][^\"\\'@]*(?:(?:' + tagAttrInlineCs + ')[^\"\\'@]*)+[\"\\']' +\n\t\t')';\n\n\tvar tagAttrs = /(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*<tagAttrValue>|(?=[\\s/>])))+)?/.source.replace(/<tagAttrValue>/, tagAttrValue);\n\tvar tagContent = /(?!\\d)[^\\s>\\/=$<%]+/.source + tagAttrs + /\\s*\\/?>/.source;\n\tvar tagRegion =\n\t\t/\\B@?/.source +\n\t\t'(?:' +\n\t\t/<([a-zA-Z][\\w:]*)/.source + tagAttrs + /\\s*>/.source +\n\t\t'(?:' +\n\t\t(\n\t\t\t/[^<]/.source +\n\t\t\t'|' +\n\t\t\t// all tags that are not the start tag\n\t\t\t// eslint-disable-next-line regexp/strict\n\t\t\t/<\\/?(?!\\1\\b)/.source + tagContent +\n\t\t\t'|' +\n\t\t\t// nested start tag\n\t\t\tnested(\n\t\t\t\t// eslint-disable-next-line regexp/strict\n\t\t\t\t/<\\1/.source + tagAttrs + /\\s*>/.source +\n\t\t\t\t'(?:' +\n\t\t\t\t(\n\t\t\t\t\t/[^<]/.source +\n\t\t\t\t\t'|' +\n\t\t\t\t\t// all tags that are not the start tag\n\t\t\t\t\t// eslint-disable-next-line regexp/strict\n\t\t\t\t\t/<\\/?(?!\\1\\b)/.source + tagContent +\n\t\t\t\t\t'|' +\n\t\t\t\t\t'<self>'\n\t\t\t\t) +\n\t\t\t\t')*' +\n\t\t\t\t// eslint-disable-next-line regexp/strict\n\t\t\t\t/<\\/\\1\\s*>/.source,\n\t\t\t\t2\n\t\t\t)\n\t\t) +\n\t\t')*' +\n\t\t// eslint-disable-next-line regexp/strict\n\t\t/<\\/\\1\\s*>/.source +\n\t\t'|' +\n\t\t/</.source + tagContent +\n\t\t')';\n\n\t// Now for the actual language definition(s):\n\t//\n\t// Razor as a language has 2 parts:\n\t//  1) CSHTML: A markup-like language that has been extended with inline C# code expressions and blocks.\n\t//  2) C#+HTML: A variant of C# that can contain CSHTML tags as expressions.\n\t//\n\t// In the below code, both CSHTML and C#+HTML will be create as separate language definitions that reference each\n\t// other. However, only CSHTML will be exported via `Prism.languages`.\n\n\tPrism.languages.cshtml = Prism.languages.extend('markup', {});\n\n\tvar csharpWithHtml = Prism.languages.insertBefore('csharp', 'string', {\n\t\t'html': {\n\t\t\tpattern: RegExp(tagRegion),\n\t\t\tgreedy: true,\n\t\t\tinside: Prism.languages.cshtml\n\t\t},\n\t}, { csharp: Prism.languages.extend('csharp', {}) });\n\n\tvar cs = {\n\t\tpattern: /\\S[\\s\\S]*/,\n\t\talias: 'language-csharp',\n\t\tinside: csharpWithHtml\n\t};\n\n\tvar inlineValue = {\n\t\tpattern: RegExp(/(^|[^@])/.source + inlineCs),\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\talias: 'variable',\n\t\tinside: {\n\t\t\t'keyword': /^@/,\n\t\t\t'csharp': cs\n\t\t}\n\t};\n\n\tPrism.languages.cshtml.tag.pattern = RegExp(/<\\/?/.source + tagContent);\n\tPrism.languages.cshtml.tag.inside['attr-value'].pattern = RegExp(/=\\s*/.source + tagAttrValue);\n\tPrism.languages.insertBefore('inside', 'punctuation', { 'value': inlineValue }, Prism.languages.cshtml.tag.inside['attr-value']);\n\n\tPrism.languages.insertBefore('cshtml', 'prolog', {\n\t\t'razor-comment': {\n\t\t\tpattern: /@\\*[\\s\\S]*?\\*@/,\n\t\t\tgreedy: true,\n\t\t\talias: 'comment'\n\t\t},\n\n\t\t'block': {\n\t\t\tpattern: RegExp(\n\t\t\t\t/(^|[^@])@/.source +\n\t\t\t\t'(?:' +\n\t\t\t\t[\n\t\t\t\t\t// @{ ... }\n\t\t\t\t\tcurly,\n\t\t\t\t\t// @code{ ... }\n\t\t\t\t\t/(?:code|functions)\\s*/.source + curly,\n\t\t\t\t\t// @for (...) { ... }\n\t\t\t\t\t/(?:for|foreach|lock|switch|using|while)\\s*/.source + round + /\\s*/.source + curly,\n\t\t\t\t\t// @do { ... } while (...);\n\t\t\t\t\t/do\\s*/.source + curly + /\\s*while\\s*/.source + round + /(?:\\s*;)?/.source,\n\t\t\t\t\t// @try { ... } catch (...) { ... } finally { ... }\n\t\t\t\t\t/try\\s*/.source + curly + /\\s*catch\\s*/.source + round + /\\s*/.source + curly + /\\s*finally\\s*/.source + curly,\n\t\t\t\t\t// @if (...) {...} else if (...) {...} else {...}\n\t\t\t\t\t/if\\s*/.source + round + /\\s*/.source + curly + '(?:' + /\\s*else/.source + '(?:' + /\\s+if\\s*/.source + round + ')?' + /\\s*/.source + curly + ')*',\n\t\t\t\t\t// @helper Ident(params) { ... }\n\t\t\t\t\t/helper\\s+\\w+\\s*/.source + round + /\\s*/.source + curly,\n\t\t\t\t].join('|') +\n\t\t\t\t')'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'keyword': /^@\\w*/,\n\t\t\t\t'csharp': cs\n\t\t\t}\n\t\t},\n\n\t\t'directive': {\n\t\t\tpattern: /^([ \\t]*)@(?:addTagHelper|attribute|implements|inherits|inject|layout|model|namespace|page|preservewhitespace|removeTagHelper|section|tagHelperPrefix|using)(?=\\s).*/m,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'keyword': /^@\\w+/,\n\t\t\t\t'csharp': cs\n\t\t\t}\n\t\t},\n\n\t\t'value': inlineValue,\n\n\t\t'delegate-operator': {\n\t\t\tpattern: /(^|[^@])@(?=<)/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'operator'\n\t\t}\n\t});\n\n\tPrism.languages.razor = Prism.languages.cshtml;\n\n}(Prism));\n"],"names":[],"sourceRoot":""}