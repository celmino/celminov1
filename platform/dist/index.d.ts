// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../react
//   ../../@tuval/forms
//   ../../@realmocean/sdk

import React from "react";
import { UIFormController } from "@tuval/forms";
import { DialogView } from "@tuval/forms";
import { DialogView, UIView } from "@tuval/forms";
import { UIView } from "@tuval/forms";
import { Client } from "@realmocean/sdk";
import { ServiceBroker } from "@realmocean/sdk";

import './exports';

export const UIFormBuilderContext: React.Context<any>;
export const useFormBuilder: () => any;
export function compileFormula(formData: any, code: string): string;
export const FormTitle: (title: string) => import("@tuval/forms").HStackClass;
export class FormBuilder {
    static viewFactories: {};
    static actionFactories: {};
    static layoutFactories: {};
    static containerFactories: {};
    static injectView(viewType: string, viewFactory: any): void;
    static injectAction(actionFactory: any): any;
    static injectAction(actionType: string, actionFactory: any): any;
    static injectLayout(layoutType: string, viewFactory: any): void;
    static injectContainer(containerType: string, viewFactory: any): void;
    static getViewFactory(type: string): any;
    static getView(fieldInfo: any): any;
    static canRender(fieldInfo: any, formController?: UIFormController): boolean;
    static render(_formMeta: string | object | object[]): import("@tuval/forms").FragmentClass | import("@tuval/forms").TextClass | import("@tuval/forms").ConfigContextClass;
    static compileFormula(formula: any): string;
}

export class DynoDialog extends DialogView {
    constructor();
    BindRouterParams(formData: any): void;
    OnOK(): void;
    OnCancel(): void;
    LoadView(): import("@tuval/forms").UISpinnerClass | import("@tuval/forms").VStackClass;
    static Show(formData: any): Promise<any>;
}

export class SelectAppletDialog extends DialogView {
    BindRouterParams({ workspaceId, parent, space }: {
        workspaceId: any;
        parent: any;
        space: any;
    }): void;
    constructor();
    OnOK(applet: any): void;
    OnCancel(): void;
    LoadView(): UIView;
    static Show(workspaceId: string, parent?: string, space?: string): Promise<any>;
}

export class AboutDialog extends DialogView {
    constructor();
    BindRouterParams({ applet }: {
        applet: any;
    }): void;
    OnOK(): void;
    OnCancel(): void;
    LoadView(): import("@tuval/forms").VStackClass;
    static Show(applet: any): Promise<any>;
}

export const NewFieldMenuView: ({ view, onNewFieldAdded }: {
    view: (menuIsOpen: boolean) => UIView;
    onNewFieldAdded?: Function;
}) => import("@tuval/forms").ReactViewClass;

export interface IColorView extends UIView {
    selectedColor(value: string): any;
    onChange(value: Function): any;
}
export const ColorView: () => IColorView;

type FunctionValue<View, T> = (value: T) => View;
export interface ITabMenu extends UIView {
    menuItems: FunctionValue<ITabMenu, any[]>;
    selectedKey: FunctionValue<ITabMenu, string>;
    onSelect: FunctionValue<ITabMenu, Function>;
}
export const TabMenu: () => ITabMenu;
export {};

export const useAppletNavigate: () => {
    navigate: Function;
};

export const useRealmNavigate: () => {
    navigate: (url: string) => void;
};

export const useDeleteApplet: () => {
    deleteApplet: (appletId: string, onSuccess?: Function) => void;
    isLoading: boolean;
};

export const useCreatePersonelRealm: () => {
    createPersonelRealm: ({ realmId, name, organizationId }: {
        /**
          * The name of the account.
          */
        realmId?: string;
        name: string;
        organizationId: string;
    }, onSuccess?: (data: any) => void) => void;
    isLoading: boolean;
    isSuccess: boolean;
    isError: boolean;
    error: {
        message: string;
    };
};

export const useCreateApplet: () => {
    createApplet: ({ realmId, schema }: {
        /**
          * The name of the account.
          */
        realmId: string;
        schema: any;
    }, onSuccess?: (data: any) => void) => void;
    isLoading: boolean;
    isSuccess: boolean;
    isError: boolean;
    error: {
        message: string;
    };
};

export const useGetApplet: (realmId: string, appletId: string) => {
    applet: IApplet;
    isLoading: boolean;
};

export const ListApplet: {
    name: string;
    type: string;
    tree_type: string;
    applet_type: string;
    description: string;
    iconCategory: string;
    iconName: string;
    icon: string;
    iconBackColor: string;
    enabled: boolean;
    version: number[];
    databases: {
        name: string;
        id: string;
        category: string;
        collections: ({
            documents: {
                $id: string;
                name: string;
            }[];
            name: string;
            id: string;
            attributes: {
                key: string;
                type: string;
            }[];
        } | {
            documents: {
                key: string;
                name: string;
                type: string;
                fieldInfo: string;
            }[];
            name: string;
            id: string;
            attributes: ({
                key: string;
                type: string;
                defaultValue?: undefined;
                size?: undefined;
            } | {
                key: string;
                type: string;
                defaultValue: boolean;
                size?: undefined;
            } | {
                key: string;
                type: string;
                size: number;
                defaultValue?: undefined;
            })[];
        } | {
            name: string;
            id: string;
            attributes: {
                key: string;
                type: string;
                size: number;
            }[];
        } | {
            name: string;
            id: string;
            attributes: ({
                key: string;
                type: string;
                size: number;
                defaultValue?: undefined;
            } | {
                key: string;
                type: string;
                defaultValue: boolean;
                size?: undefined;
            })[];
            documents: {
                viewId: string;
                key: string;
                hidden: boolean;
            }[];
        })[];
    }[];
};

export const FeedApplet: {
    name: string;
    type: string;
    tree_type: string;
    applet_type: string;
    description: string;
    iconCategory: string;
    iconName: string;
    icon: string;
    iconBackColor: string;
    enabled: boolean;
    version: number[];
    databases: {
        name: string;
        id: string;
        category: string;
        collections: {
            name: string;
            id: string;
            attributes: ({
                key: string;
                type: string;
                size?: undefined;
            } | {
                key: string;
                type: string;
                size: number;
            })[];
        }[];
    }[];
};

export const CelminoServices: {
    Realm: {
        createPersonelRealm: (realmId: string, realmName: string, organizationId: string) => Promise<void>;
    };
};

export class AppletServiceBroker extends Client {
    static get Default(): AppletServiceBroker;
    headers: any;
    constructor();
    setRealmId(value: string): this;
    setAppletId(value: string): this;
    createApplet(schema: any): Promise<any>;
    getRealmCollections(): Promise<any>;
}

export class RealmServiceBroker extends ServiceBroker<any> {
    static get Default(): RealmServiceBroker;
    get ServiceName(): string;
    setup(accountId: string, realmId: string, realmName: string): Promise<any>;
}

export const ColorSelect: ({ onSelect }: {
    onSelect: any;
}) => import("@tuval/forms").HStackClass;

export class SelectSiderDialog extends DialogView {
    constructor();
    BindRouterParams({ siders }: {
        siders: any;
    }): void;
    OnOK(applet: any): void;
    OnCancel(): void;
    LoadView(): import("@tuval/forms").VStackClass;
    static Show(): Promise<any>;
}

export function OrganizationContext(childFunc: () => UIView): OrganizationContextClass;

export const OrganizationContextProvider: React.Context<any>;
export const useOrganization: () => any;

export function RealmContext(childFunc: () => UIView): RealmContextClass;

export const RealmContextProvider: React.Context<any>;
export const useRealm: () => any;

export function PersonelRealmContext(childFunc: () => UIView): PersonelRealmContextClass;

export const PersonelRealmContextProvider: React.Context<any>;

export function AppletContext(childFunc: (applet: IApplet) => UIView): AppletContextClass;

export const AppletContextProvider: React.Context<any>;
export const useApplet: () => {
    applet: any;
    updateAppletName: Function;
    settings: any;
    isLoading: boolean;
};

export function TreeContext(childFunc: () => UIView): TreeContextClass;

export const TreeContextProvider: React.Context<any>;
export const useRealmTree: () => any;

export function AccountContext(childFunc: () => UIView): AccountContextClass;

export const AccountContextProvider: React.Context<any>;
export const useAccount: () => {
    account: any;
    isAnonymous: boolean;
};

export function AnonymousContext(childFunc: () => UIView): AnonymousContextClass;

export const AnonymousContextProvider: React.Context<any>;
export const useAnonymousAccount: () => any;

export function UserContext(childFunc: () => UIView): UserContextClass;

export const UserContextProvider: React.Context<any>;

export function WidgetContext(childFunc: () => UIView): WidgetContextClass;

export const WidgetContextProvider: React.Context<any>;
export const useWidget: () => {
    isWidget;
};

export interface IApplet {
    $id: string;
    name: string;
    opa: string;
    type: string;
    iconName: string;
    iconCategory: string;
    themeColor: string;
}

export class OrganizationContextClass extends UIView {
    /** @internal */
    vp_ChildFunc: () => UIView;
    childFunc(value: () => UIView): this;
    render(): React.JSX.Element;
}

export class RealmContextClass extends UIView {
    /** @internal */
    vp_ChildFunc: () => UIView;
    childFunc(value: () => UIView): this;
    render(): React.JSX.Element;
}

export class PersonelRealmContextClass extends UIView {
    /** @internal */
    vp_ChildFunc: () => UIView;
    childFunc(value: () => UIView): this;
    render(): React.JSX.Element;
}

export class AppletContextClass extends UIView {
    /** @internal */
    vp_AppletId: string;
    appletId(value: string): this;
    /** @internal */
    vp_ChildFunc: (applet: IApplet) => UIView;
    childFunc(value: (applet: IApplet) => UIView): this;
    render(): React.JSX.Element;
}

export class TreeContextClass extends UIView {
    /** @internal */
    vp_ChildFunc: () => UIView;
    childFunc(value: () => UIView): this;
    /** @internal */
    vp_SetCanDrag: (value: boolean) => void;
    setCanDrag(value: (value: boolean) => void): this;
    render(): React.JSX.Element;
}

export class AccountContextClass extends UIView {
    /** @internal */
    vp_ChildFunc: () => UIView;
    childFunc(value: () => UIView): this;
    render(): React.JSX.Element;
}

export class AnonymousContextClass extends UIView {
    /** @internal */
    vp_ChildFunc: () => UIView;
    childFunc(value: () => UIView): this;
    render(): React.JSX.Element;
}

export class UserContextClass extends UIView {
    /** @internal */
    vp_ChildFunc: () => UIView;
    childFunc(value: () => UIView): this;
    render(): React.JSX.Element;
}

export class WidgetContextClass extends UIView {
    /** @internal */
    vp_AppletId: string;
    appletId(value: string): this;
    /** @internal */
    vp_ChildFunc: () => UIView;
    childFunc(value: () => UIView): this;
    render(): React.JSX.Element;
}

