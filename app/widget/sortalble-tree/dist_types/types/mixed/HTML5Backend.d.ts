import EnterLeaveCounter from './EnterLeaveCounter';
import HTML5Backend from 'react-dnd-html5-backend/lib/HTML5Backend';
export default class _HTML5Backend extends HTML5Backend {
    actions: any;
    monitor: any;
    registry: any;
    sourcePreviewNodes: {};
    sourcePreviewNodeOptions: {};
    sourceNodes: {};
    sourceNodeOptions: {};
    enterLeaveCounter: EnterLeaveCounter;
    currentNativeSource: any;
    currentNativeHandle: any;
    currentDragSourceNode: any;
    currentDragSourceNodeOffset: any;
    currentDragSourceNodeOffsetChanged: boolean;
    dragStartSourceIds: any[];
    dragEnterTargetIds: any[];
    dragOverTargetIds: any[];
    dropTargetIds: any[];
    constructor(manager: any);
    setup(): void;
    teardown(): void;
    connectDragPreview(sourceId: any, node: any, options: any): () => void;
    connectDragSource(sourceId: any, node: any, options: any): () => void;
    connectDropTarget(targetId: any, node: any): () => void;
    getCurrentSourceNodeOptions(): any;
    getCurrentDropEffect(): any;
    getCurrentSourcePreviewNodeOptions(): any;
    getSourceClientOffset(sourceId: any): {
        x: any;
        y: any;
    };
    isDraggingNativeItem(): boolean;
    beginDragNativeItem(type: any): void;
    endDragNativeItem(): void;
    endDragIfSourceWasRemovedFromDOM(): void;
    setCurrentDragSourceNode(node: any): void;
    clearCurrentDragSourceNode(): boolean;
    checkIfCurrentDragSourceRectChanged(): boolean;
    handleTopDragStartCapture(): void;
    handleDragStart(e: any, sourceId: any): void;
    handleTopDragStart(e: any): void;
    handleTopDragEndCapture(): void;
    handleTopDragEnterCapture(e: any): void;
    handleDragEnter(e: any, targetId: any): void;
    handleTopDragEnter(e: any): void;
    handleTopDragOverCapture(): void;
    handleDragOver(e: any, targetId: any): void;
    handleTopDragOver(e: any): void;
    handleTopDragLeaveCapture(e: any): void;
    handleTopDropCapture(e: any): void;
    handleDrop(e: any, targetId: any): void;
    handleTopDrop(e: any): void;
    handleSelectStart(e: any): void;
}
