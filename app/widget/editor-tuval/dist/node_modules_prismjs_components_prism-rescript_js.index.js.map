{"version":3,"file":"node_modules_prismjs_components_prism-rescript_js.index.js","mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA,EAAE;AACF,WAAW,sDAAsD;AACjE;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,EAAE;AACF,wHAAwH,IAAI;AAC5H;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA,iBAAiB,EAAE;AACnB,sBAAsB,KAAK;AAC3B;;AAEA;AACA;AACA,6BAA6B,OAAO,IAAI,OAAO,IAAI,GAAG,IAAI,IAAI,IAAI,QAAQ;AAC1E;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,gCAAgC,EAAE,OAAO,OAAO,IAAI,OAAO,IAAI,GAAG,IAAI,IAAI,IAAI;AAC9E;AACA;AACA;AACA,qBAAqB,GAAG;AACxB;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA,EAAE;AACF,CAAC;;AAED","sources":["webpack://tuval-core/./node_modules/prismjs/components/prism-rescript.js"],"sourcesContent":["Prism.languages.rescript = {\n\t'comment': {\n\t\tpattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\tgreedy: true\n\t},\n\t'char': { pattern: /'(?:[^\\r\\n\\\\]|\\\\(?:.|\\w+))'/, greedy: true },\n\t'string': {\n\t\tpattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n\t\tgreedy: true\n\t},\n\t'class-name': /\\b[A-Z]\\w*|@[a-z.]*|#[A-Za-z]\\w*|#\\d/,\n\t'function': {\n\t\tpattern: /[a-zA-Z]\\w*(?=\\()|(\\.)[a-z]\\w*/,\n\t\tlookbehind: true,\n\t},\n\t'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n\t'boolean': /\\b(?:false|true)\\b/,\n\t'attr-value': /[A-Za-z]\\w*(?==)/,\n\t'constant': {\n\t\tpattern: /(\\btype\\s+)[a-z]\\w*/,\n\t\tlookbehind: true\n\t},\n\t'tag': {\n\t\tpattern: /(<)[a-z]\\w*|(?:<\\/)[a-z]\\w*/,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'operator': /<|>|\\//,\n\t\t},\n\t},\n\t'keyword': /\\b(?:and|as|assert|begin|bool|class|constraint|do|done|downto|else|end|exception|external|float|for|fun|function|if|in|include|inherit|initializer|int|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|string|switch|then|to|try|type|when|while|with)\\b/,\n\t'operator': /\\.{3}|:[:=]?|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:asr|land|lor|lsl|lsr|lxor|mod)\\b/,\n\t'punctuation': /[(){}[\\],;.]/\n};\n\nPrism.languages.insertBefore('rescript', 'string', {\n\t'template-string': {\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'template-punctuation': {\n\t\t\t\tpattern: /^`|`$/,\n\t\t\t\talias: 'string'\n\t\t\t},\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\n\t\t\t\t\t\talias: 'tag'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.rescript\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t},\n});\n\nPrism.languages.res = Prism.languages.rescript;\n"],"names":[],"sourceRoot":""}