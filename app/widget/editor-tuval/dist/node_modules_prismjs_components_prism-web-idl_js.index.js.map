{"version":3,"file":"node_modules_prismjs_components_prism-web-idl_js.index.js","mappings":";;;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA,6CAA6C,EAAE,8BAA8B;AAC7E;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH,kBAAkB,EAAE;AACpB,uBAAuB,MAAM;AAC7B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC","sources":["webpack://tuval-core/./node_modules/prismjs/components/prism-web-idl.js"],"sourcesContent":["(function (Prism) {\n\n\tvar id = /(?:\\B-|\\b_|\\b)[A-Za-z][\\w-]*(?![\\w-])/.source;\n\tvar type =\n\t\t'(?:' +\n\t\t/\\b(?:unsigned\\s+)?long\\s+long(?![\\w-])/.source +\n\t\t'|' +\n\t\t/\\b(?:unrestricted|unsigned)\\s+[a-z]+(?![\\w-])/.source +\n\t\t'|' +\n\t\t/(?!(?:unrestricted|unsigned)\\b)/.source + id + /(?:\\s*<(?:[^<>]|<[^<>]*>)*>)?/.source +\n\t\t')' + /(?:\\s*\\?)?/.source;\n\n\tvar typeInside = {};\n\n\tPrism.languages['web-idl'] = {\n\t\t'comment': {\n\t\t\tpattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n\t\t\tgreedy: true\n\t\t},\n\t\t'string': {\n\t\t\tpattern: /\"[^\"]*\"/,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t'namespace': {\n\t\t\tpattern: RegExp(/(\\bnamespace\\s+)/.source + id),\n\t\t\tlookbehind: true,\n\t\t},\n\t\t'class-name': [\n\t\t\t{\n\t\t\t\tpattern: /(^|[^\\w-])(?:iterable|maplike|setlike)\\s*<(?:[^<>]|<[^<>]*>)*>/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: typeInside\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: RegExp(/(\\b(?:attribute|const|deleter|getter|optional|setter)\\s+)/.source + type),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: typeInside\n\t\t\t},\n\t\t\t{\n\t\t\t\t// callback return type\n\t\t\t\tpattern: RegExp('(' + /\\bcallback\\s+/.source + id + /\\s*=\\s*/.source + ')' + type),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: typeInside\n\t\t\t},\n\t\t\t{\n\t\t\t\t// typedef\n\t\t\t\tpattern: RegExp(/(\\btypedef\\b\\s*)/.source + type),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: typeInside\n\t\t\t},\n\n\t\t\t{\n\t\t\t\tpattern: RegExp(/(\\b(?:callback|dictionary|enum|interface(?:\\s+mixin)?)\\s+)(?!(?:interface|mixin)\\b)/.source + id),\n\t\t\t\tlookbehind: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\t// inheritance\n\t\t\t\tpattern: RegExp(/(:\\s*)/.source + id),\n\t\t\t\tlookbehind: true,\n\t\t\t},\n\n\t\t\t// includes and implements\n\t\t\tRegExp(id + /(?=\\s+(?:implements|includes)\\b)/.source),\n\t\t\t{\n\t\t\t\tpattern: RegExp(/(\\b(?:implements|includes)\\s+)/.source + id),\n\t\t\t\tlookbehind: true,\n\t\t\t},\n\n\t\t\t{\n\t\t\t\t// function return type, parameter types, and dictionary members\n\t\t\t\tpattern: RegExp(type + '(?=' + /\\s*(?:\\.{3}\\s*)?/.source + id + /\\s*[(),;=]/.source + ')'),\n\t\t\t\tinside: typeInside\n\t\t\t},\n\t\t],\n\n\t\t'builtin': /\\b(?:ArrayBuffer|BigInt64Array|BigUint64Array|ByteString|DOMString|DataView|Float32Array|Float64Array|FrozenArray|Int16Array|Int32Array|Int8Array|ObservableArray|Promise|USVString|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray)\\b/,\n\t\t'keyword': [\n\t\t\t/\\b(?:async|attribute|callback|const|constructor|deleter|dictionary|enum|getter|implements|includes|inherit|interface|mixin|namespace|null|optional|or|partial|readonly|required|setter|static|stringifier|typedef|unrestricted)\\b/,\n\t\t\t// type keywords\n\t\t\t/\\b(?:any|bigint|boolean|byte|double|float|iterable|long|maplike|object|octet|record|sequence|setlike|short|symbol|undefined|unsigned|void)\\b/\n\t\t],\n\t\t'boolean': /\\b(?:false|true)\\b/,\n\n\t\t'number': {\n\t\t\tpattern: /(^|[^\\w-])-?(?:0x[0-9a-f]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|NaN|Infinity)(?![\\w-])/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'operator': /\\.{3}|[=:?<>-]/,\n\t\t'punctuation': /[(){}[\\].,;]/\n\t};\n\n\tfor (var key in Prism.languages['web-idl']) {\n\t\tif (key !== 'class-name') {\n\t\t\ttypeInside[key] = Prism.languages['web-idl'][key];\n\t\t}\n\t}\n\n\tPrism.languages['webidl'] = Prism.languages['web-idl'];\n\n}(Prism));\n"],"names":[],"sourceRoot":""}